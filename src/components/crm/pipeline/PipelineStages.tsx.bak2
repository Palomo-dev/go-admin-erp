"use client";

import { useState, useEffect, useMemo, useCallback } from "react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { useToast } from "@/components/ui/use-toast";
import { supabase } from "@/lib/supabase/config";
import {
  ArrowRight,
  Calendar,
  DollarSign,
  Loader2,
  BarChart3,
  User,
  Settings,
} from "lucide-react";
import { formatCurrency, getCurrentTheme, applyTheme } from "@/utils/Utils";
import { DragDropContext, Droppable, Draggable } from "@hello-pangea/dnd";
import { SupabaseClient } from '@supabase/supabase-js';
import { Skeleton } from "@/components/ui/skeleton";
import { handleStageChangeAutomation } from "./OpportunityAutomations";
import { toast } from "@/components/ui/use-toast";

interface Stage {
  id: string;
  name: string;
  color?: string;
  description?: string;
  position: number;
  pipeline_id: string;
  probability?: number;
}

interface Customer {
  id: string;
  full_name: string;
  email?: string;
  // Eliminamos company ya que no existe en la tabla customers
}

interface Opportunity {
  id: string;
  name: string; // La tabla usa 'name' en lugar de 'title'
  stage_id: string;
  customer_id: string;
  amount: number; // La tabla usa 'amount' en lugar de 'value'
  expected_close_date: string;
  customer: Customer;
  customers?: Customer[];
  status?: string;
  currency?: string;
}

interface PipelineStagesProps {
  pipelineId: string;
}

export default function PipelineStages({ pipelineId }: PipelineStagesProps) {
  const [stages, setStages] = useState<Stage[]>([]);
  const [opportunities, setOpportunities] = useState<Opportunity[]>([]);
  const [loading, setLoading] = useState(true);
  const [organizationId, setOrganizationId] = useState<string | number | null>(
    null
  );
  const [userId, setUserId] = useState<string | null>(null);

  // Estado para el diálogo de configuración de etapas
  const [configStage, setConfigStage] = useState<any>(null);
  const [isConfigOpen, setIsConfigOpen] = useState(false);
  const [stageName, setStageName] = useState("");
  const [stageProbability, setStageProbability] = useState<number | null>(null);
  const [stageColor, setStageColor] = useState("#3b82f6");
  const [stageDescription, setStageDescription] = useState("");
  const [isSaving, setIsSaving] = useState(false);

  // Función para validar y normalizar un ID de organización
  // Devuelve el ID original como número si es numérico o como string si es UUID
  const validateOrganizationId = (
    id: string | null
  ): string | number | null => {
    if (!id) return null;

    // Si ya es un UUID válido, lo retornamos como string
    const uuidPattern =
      /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    if (uuidPattern.test(id)) return id;

    // Si es un número simple como "2", lo devolvemos como número para consultas en tablas con ID numéricos
    if (/^\d+$/.test(id)) {
      const num = parseInt(id, 10);
      if (!isNaN(num)) {
        return num; // Devolver como número para consultas SQL
      }
    }

    // Si no es ni UUID ni número, devolvemos el valor original
    return id;
  };

  // Función para verificar si un valor es un UUID válido
  const isValidUUID = (uuid: string | null): boolean => {
    if (!uuid) return false;
    const pattern =
      /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
    return pattern.test(uuid);
  };

  // Función para verificar si un valor es un número entero válido
  const isValidInteger = (value: string | null): boolean => {
    if (!value) return false;
    return /^\d+$/.test(value);
  };

  // Obtener ID de la organización y el usuario
  useEffect(() => {
    // Obtener ID de la organización desde localStorage
    const storedOrg = localStorage.getItem("selectedOrganization");
    if (storedOrg) {
      try {
        const orgData = JSON.parse(storedOrg);
        // Normalizar y validar el ID de organización
        const orgId = String(orgData.id);
        const normalizedId = validateOrganizationId(orgId);
        if (normalizedId) {
          setOrganizationId(normalizedId);
        } else {
          // Si no es un ID válido, buscar en otras claves
          searchOrganizationInOtherKeys();
        }
      } catch (error) {
        // Si hay error, buscar en otras claves como fallback
        searchOrganizationInOtherKeys();
      }
    } else {
      // Si no está en selectedOrganization, buscar en otras claves
      searchOrganizationInOtherKeys();
    }
  }, []);

  // Función para buscar el ID de la organización en otras claves del localStorage
  const searchOrganizationInOtherKeys = () => {
    // Intentar encontrar el ID con otras posibles claves
    const possibleKeys = [
      "currentOrganizationId",
      "organizationId",
      "selectedOrganizationId",
    ];

    let foundOrgId = false;

    // Buscar en localStorage
    for (const key of possibleKeys) {
      const orgId = localStorage.getItem(key);
      if (orgId) {
        // Normalizar el ID de organización para asegurar formato UUID o número
        const normalizedId = validateOrganizationId(String(orgId));
        if (normalizedId) {
          setOrganizationId(normalizedId);
          foundOrgId = true;
          break;
        }
      }
    }

    // Si no se encuentra en ninguna clave, usar null
    if (!foundOrgId) {
      setOrganizationId(null);
    }
  };

  // Obtener ID del usuario autenticado
  useEffect(() => {
    const getUser = async () => {
      try {
        const {
          data: { user },
          error,
        } = await supabase.auth.getUser();
        if (error) {
          toast({
            title: "Error",
            description: `Error al obtener usuario: ${error.message}`,
            variant: "destructive",
          });
          return;
        }

        if (user) {
          setUserId(user.id);
        } else {
          toast({
            title: "Advertencia",
            description: "No se pudo obtener el usuario autenticado",
            variant: "default",
          });
        }
      } catch (err) {
        toast({
          title: "Error",
          description: "Error inesperado al obtener usuario",
          variant: "destructive",
        });
      }
    };

    getUser();
  }, []);

  // Función para cargar las etapas del pipeline
  const loadStages = async () => {
    if (!pipelineId) {
      toast({
        title: "Error",
        description: "ID de pipeline no definido",
        variant: "destructive",
      });
      return;
    }

    try {
      setLoading(true);
      const { data, error } = await supabase
        .from("stages")
        .select("id, name, position, pipeline_id, probability")
        .eq("pipeline_id", pipelineId)
        .order("position");

      if (error) {
        toast({
          title: "Error",
          description: "Error al cargar etapas",
          variant: "destructive",
        });
        return;
      }

      // Verificar si se encontraron etapas
      if (!data || data.length === 0) {
        return;
      }

      // Asegurarse de que todos los datos tengan el pipeline_id
      const stagesWithPipelineId = data.map((stage) => ({
        ...stage,
        pipeline_id: stage.pipeline_id || pipelineId,
      }));

      setStages(stagesWithPipelineId);
    } catch (err) {
      toast({
        title: "Error",
        description: "Error al cargar etapas",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  };

  // Función para cargar las oportunidades (con useCallback para evitar bucles infinitos)
  const loadOpportunities = useCallback(async () => {
    if (!pipelineId) {
      toast({
        title: "Error",
        description: "ID de pipeline no definido para cargar oportunidades",
        variant: "destructive",
      });
      return;
    }

    try {
      setLoading(true);

      // Construir la consulta base
      let query = supabase
        .from("opportunities")
        .select(
          `
          id, name, stage_id, customer_id, amount, currency, expected_close_date, status,
          customer:customers!customer_id(id, full_name, email)
        `
        )
        .eq("pipeline_id", pipelineId)
        .in("status", ["open", "won", "lost"]) // Mostrar todas las oportunidades (abiertas, ganadas y perdidas)
        .order("updated_at", { ascending: false });

      // Agregar filtro de organización solo si está disponible
      if (organizationId) {
        // Ya tenemos el organizationId en el formato correcto (número o string)
        // gracias a la función validateOrganizationId
        query = query.eq("organization_id", organizationId);
      }

      const { data, error } = await query;

      if (error) {
        toast({
          title: "Error",
          description: "Error al cargar oportunidades",
          variant: "destructive",
        });
        return;
      }

      // Verificar si se encontraron oportunidades
      if (!data || data.length === 0) {
        return;
      }

      // Las oportunidades ya vienen con el objeto customer desde Supabase
      const formattedOpps = data.map((opp: any) => {
        // Si no hay datos del cliente, proporcionamos un valor predeterminado
        if (!opp.customer) {
          return {
            ...opp,
            customer: { id: opp.customer_id, full_name: "Cliente sin nombre" },
          };
        }
        return opp;
      });

      setOpportunities(formattedOpps);
    } catch (err) {
      toast({
        title: "Error",
        description: "Error al cargar oportunidades",
        variant: "destructive",
      });
    } finally {
      setLoading(false);
    }
  }, [pipelineId, organizationId]);

  // Cargar datos iniciales cuando el componente se monta
  useEffect(() => {
    if (pipelineId) {
      loadStages();
      loadOpportunities();
    } else {
      toast({
        title: "Error",
        description: "No se puede cargar datos: pipelineId no está definido",
        variant: "destructive",
      });
    }
  }, [pipelineId, organizationId, loadOpportunities]);

  // Escuchar el evento para recargar datos cuando se crea una nueva oportunidad
  useEffect(() => {
    const handleRefresh = () => {
      loadOpportunities();
    };

    window.addEventListener("refresh-pipeline-data", handleRefresh);

    // Eliminar el listener al desmontar
    return () => {
      window.removeEventListener("refresh-pipeline-data", handleRefresh);
    };
  }, [loadOpportunities]);

  // Filtrar las oportunidades por etapa
  const getOpportunitiesByStage = (stageId: string) => {
    return opportunities.filter(
      (opportunity) => opportunity.stage_id === stageId
    );
  };

  // Calcular el valor total de las oportunidades en una etapa
  const calculateStageValue = (stageId: string): number => {
    const stageOpportunities = getOpportunitiesByStage(stageId);
    return stageOpportunities.reduce((total: number, opp: any) => {
      // Calcular el valor usando el campo amount
      const weightedValue = opp.amount || 0;
      return total + weightedValue;
    }, 0);
  };

  // Función para manejar la configuración de etapas
  const handleConfigStage = (stageToEdit: any) => {
    setConfigStage(stageToEdit);
    setStageName(stageToEdit.name || "");
    setStageProbability(
      stageToEdit.probability ? stageToEdit.probability * 100 : null
    );
    setStageColor(stageToEdit.color || "#3b82f6"); // Color predeterminado azul
    setStageDescription(stageToEdit.description || "");
    setIsConfigOpen(true);
  };

  // Función para guardar los cambios de la etapa
  const handleSaveStage = async () => {
    if (!configStage) return;
    setIsSaving(true); // Mostrar carga

    try {
      // Validar campos requeridos y contexto
      if (!stageName.trim()) {
        toast({
          title: "Error",
          description: "El nombre de la etapa es obligatorio",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      if (!organizationId) {
        toast({
          title: "Error",
          description: "No se pudo determinar la organización actual",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      if (!userId) {
        toast({
          title: "Error",
          description: "No se pudo determinar el usuario actual",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // Verificar que el usuario pertenece a la organización (cumple con RLS)
      const { data: memberData, error: memberError } = await supabase
        .from("organization_members")
        .select("id")
        .eq("organization_id", organizationId)
        .eq("user_id", userId)
        .maybeSingle();

      if (memberError || !memberData) {
        toast({
          title: "Error de permisos",
          description:
            "No tienes permisos para editar etapas en esta organización",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // Verificar que el pipeline pertenece a la organización correcta
      const { data: pipelineData, error: pipelineError } = await supabase
        .from("pipelines")
        .select("organization_id")
        .eq("id", configStage.pipeline_id)
        .maybeSingle();

      if (
        pipelineError ||
        !pipelineData ||
        pipelineData.organization_id !== organizationId
      ) {
        toast({
          title: "Error de acceso",
          description:
            "No se puede modificar esta etapa debido a inconsistencia de datos",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // Convertir la probabilidad a formato numérico para la BD
      // De porcentaje (0-100) a decimal (0-1)
      const probabilityValue =
        stageProbability !== null && stageProbability !== undefined
          ? stageProbability / 100
          : undefined;

      // Preparar los datos a actualizar
      const updateData = {
        name: stageName.trim(),
        probability: probabilityValue,
        color: stageColor || "#3b82f6", // Asegurar que siempre haya un color
        description: stageDescription ? stageDescription.trim() : undefined,
        updated_at: new Date().toISOString(),
      };

      // Preparar datos para actualización

      // Validar que el ID de la etapa sea un UUID válido
      if (!isValidUUID(configStage.id)) {
        toast({
          title: "Error",
          description: "El identificador de la etapa no es válido",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // Validar que el pipeline_id también sea un UUID válido
      if (!isValidUUID(configStage.pipeline_id)) {
        toast({
          title: "Error",
          description: "El identificador del pipeline no es válido",
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // SOLUCIÓN: Actualizar sin usar .select() para evitar el error con la vista materializada
      const { error } = await supabase
        .from("stages")
        .update({
          name: updateData.name,
          probability: updateData.probability,
          color: updateData.color,
          description: updateData.description,
          updated_at: new Date().toISOString(),
        })
        .eq("id", configStage.id);

      if (error) {
        toast({
          title: "Error",
          description: `No se pudo actualizar la etapa: ${
            error.message || "Error desconocido"
          }`,
          variant: "destructive",
        });
        setIsSaving(false);
        return;
      }

      // Actualizar la UI localmente ya que no tenemos respuesta directa de los datos
      setStages((prevStages) =>
        prevStages.map((s) =>
          s.id === configStage.id
            ? {
                ...s,
                name: updateData.name,
                probability:
                  updateData.probability === null
                    ? undefined
                    : updateData.probability,
                color: updateData.color,
                description: updateData.description || undefined,
              }
            : s
        )
      );

      // Mostrar mensaje de éxito
      toast({
        title: "Éxito",
        description: "La etapa se ha actualizado correctamente",
      });

      // Cerrar el diálogo
      setIsConfigOpen(false);
      setIsSaving(false);
    } catch (error) {
      toast({
        title: "Error al guardar",
        description: "No se pudo actualizar la etapa",
        variant: "destructive",
      });
      setIsSaving(false);
    }
  };

  // Calcular el valor total del pipeline completo
  const totalPipelineValue = useMemo(() => {
    return opportunities.reduce((total, opp) => total + (opp.amount || 0), 0);
  }, [opportunities]);

  // Calcular el valor ponderado total del pipeline (considerando probabilidades)
  const weightedPipelineValue = useMemo(() => {
    return opportunities.reduce((total, opp) => {
      const weightedValue = opp.amount; // Ya no usamos probability
      return total + weightedValue;
    }, 0);
  }, [opportunities]);

  // Manejar el arrastre y soltar de oportunidades entre etapas
  const handleDragEnd = async (result: any) => {
    if (!result.destination) {
      // Drag cancelado: no hay destino
      return;
    }
      .from("opportunities")
      .update({
        stage_id: toStageId,
        status: newStatus,
        updated_at: new Date().toISOString()
      })
      .eq("id", opportunityId);

    if (error) {
      // Si la actualización directa falla, intentamos con nuestra función RPC como respaldo
      console.log("Usando método alternativo después de error:", error.message);
      const { data: rpcData, error: rpcError } = await supabase.rpc('direct_update_opportunity_stage', {
        p_opportunity_id: opportunityId,
        p_stage_id: toStageId
      });
      
      if (rpcError) {
        throw rpcError;
      }
      
      if (rpcData === false) {
        throw new Error("No tienes permisos para actualizar esta oportunidad");
      }
    }

    // Si llegamos aquí, la actualización fue exitosa
    // Intentamos activar las automatizaciones en segundo plano
    try {
      const orgIdForAutomation = typeof organizationId === "string" ? 
        organizationId : 
        (organizationId ? String(organizationId) : 
          (movedOpportunity.organization_id ? String(movedOpportunity.organization_id) : null));
            
      handleStageChangeAutomation({
        opportunityId,
        fromStageId,
        toStageId,
        organizationId: orgIdForAutomation
      });
    } catch (autoError) {
      console.error("Error en automatizaciones:", autoError);
      // No revertimos la UI por errores en automatizaciones
    }
  } catch (error: any) {
    console.error("Error en sincronización:", error);
    
    // Mantener el cambio visual pero notificar al usuario del problema de sincronización
    toast({
      title: "Cambio visual completado",
      description: `La actualización visual se realizó pero hubo un error al sincronizar con el servidor. Se reintentará automáticamente.`,
      variant: "warning",
    });
    
    // Programar un reintento automático en 3 segundos
    setTimeout(() => {
      console.log("Reintentando sincronización...");
      supabase
        .from("opportunities")
        .update({
          stage_id: toStageId,
          status: newStatus
        })
        .eq("id", opportunityId)
        .then(({ error: retryError }) => {
          if (!retryError) {
            console.log("Sincronización exitosa en segundo intento");
            toast({
              title: "Sincronización completada",
              description: "La oportunidad se ha actualizado correctamente en el servidor.",
              variant: "success",
            });
          }
        });
    }, 3000);
      <div className="flex flex-wrap gap-6 p-6 overflow-x-auto bg-white/5 dark:bg-black/5 rounded-lg">
        {[1, 2, 3, 4].map((i) => (
          <div
            key={i}
            className="flex-shrink-0 w-72 bg-white dark:bg-gray-800 rounded-lg p-4 shadow-sm border border-blue-100 dark:border-blue-900"
          >
            <Skeleton className="h-10 w-full mb-4 bg-blue-100 dark:bg-blue-900/30" />
            <div className="px-3 py-2 mb-3 bg-blue-50 dark:bg-blue-900/20 rounded">
              <Skeleton className="h-6 w-full bg-blue-100 dark:bg-blue-900/30" />
            </div>
            <Skeleton className="h-24 w-full mb-2 bg-blue-100 dark:bg-blue-900/30" />
            <Skeleton className="h-24 w-full bg-blue-100 dark:bg-blue-900/30" />
          </div>
        ))}
      </div>
    );
  }

  // Mostrar mensaje si no hay etapas
  if (!stages || stages.length === 0) {
    return (
      <div className="p-8 text-center bg-white dark:bg-gray-800 rounded-lg shadow border border-blue-100 dark:border-blue-900">
        <h3 className="text-xl font-medium text-blue-700 dark:text-blue-300 mb-2">
          No hay etapas configuradas
        </h3>
        <p className="text-gray-600 dark:text-gray-400 mb-4">
          Este pipeline no tiene etapas configuradas. Contacte al administrador
          para configurar el pipeline.
        </p>
      </div>
    );
  }

  return (
    <DragDropContext onDragEnd={handleDragEnd}>
      <div
        className="flex gap-6 p-6 overflow-x-auto min-h-[calc(100vh-10rem)] bg-gray-50 dark:bg-gray-900 transition-colors duration-200"
        style={{ overflowY: "hidden" }}
      >
        {stages.map((stage) => (
          <div
            key={stage.id}
            className="flex-shrink-0 w-72 bg-white dark:bg-gray-800 rounded-lg shadow-sm transition-all duration-200 border border-blue-100 dark:border-blue-900 flex flex-col"
            style={{ maxHeight: "calc(100vh - 12rem)" }}
          >
            <div
              className="p-3 border-b border-blue-100 dark:border-blue-900 flex items-center justify-between bg-gradient-to-r from-blue-50 to-white dark:from-blue-950 dark:to-gray-900"
              style={{
                borderLeft: stage.color
                  ? `4px solid ${stage.color}`
                  : undefined,
                borderTopLeftRadius: "0.375rem",
                borderTopRightRadius: "0.375rem",
              }}
            >
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger asChild>
                    <h3 className="font-semibold text-gray-800 dark:text-gray-200 cursor-help">
                      {stage.name}
                    </h3>
                  </TooltipTrigger>
                  <TooltipContent>
                    {stage.description ? (
                      <p>{stage.description}</p>
                    ) : (
                      <p>Sin descripción</p>
                    )}
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
              <div className="flex items-center gap-2">
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger>
                      <Badge
                        variant="outline"
                        className="text-xs bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900 dark:text-blue-200 dark:border-blue-800"
                      >
                        {getOpportunitiesByStage(stage.id).length}
                      </Badge>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>Número de oportunidades</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
                <button
                  onClick={() => handleConfigStage(stage)}
                  className="ml-1 p-1 rounded-md hover:bg-blue-100 dark:hover:bg-blue-900 text-blue-600 dark:text-blue-400"
                  title="Configurar etapa"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="16"
                    height="16"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    className="lucide lucide-settings"
                  >
                    <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
                    <circle cx="12" cy="12" r="3"></circle>
                  </svg>
                </button>
              </div>
            </div>

            {/* Mostrar valor total de etapa */}
            <div className="px-3 py-2 bg-blue-50 dark:bg-blue-900/30 flex justify-between items-center text-sm border-b border-blue-100 dark:border-blue-900">
              <div className="flex items-center">
                <BarChart3 className="h-4 w-4 text-blue-600 dark:text-blue-400 mr-1.5" />
                <span className="text-blue-700 dark:text-blue-300">
                  Valor total:
                </span>
              </div>
              <TooltipProvider>
                <Tooltip>
                  <TooltipTrigger>
                    <span className="font-medium text-blue-700 dark:text-blue-300">
                      {formatCurrency(calculateStageValue(stage.id))}
                    </span>
                  </TooltipTrigger>
                  <TooltipContent>
                    <p>Valor ponderado por probabilidad</p>
                    <p className="text-xs text-gray-500">
                      Total sin ponderar:{" "}
                      {formatCurrency(
                        getOpportunitiesByStage(stage.id).reduce(
                          (acc, opp) => acc + (opp.amount || 0),
                          0
                        )
                      )}
                    </p>
                  </TooltipContent>
                </Tooltip>
              </TooltipProvider>
            </div>

            <Droppable droppableId={stage.id}>
              {(provided) => (
                <div
                  {...provided.droppableProps}
                  ref={provided.innerRef}
                  className="min-h-[12rem] p-2 bg-white dark:bg-gray-800 stage-opportunities flex-1"
                  style={{ overflowY: "auto", maxHeight: "100%" }} // Permitir scroll solo en este contenedor
                >
                  {getOpportunitiesByStage(stage.id).map(
                    (opportunity, index) => (
                      <Draggable
                        key={opportunity.id}
                        draggableId={opportunity.id}
                        index={index}
                      >
                        {(provided) => (
                          <Card
                            ref={provided.innerRef}
                            {...provided.draggableProps}
                            {...provided.dragHandleProps}
                            className={`p-3 mb-2 cursor-pointer transition-all duration-200 shadow-sm hover:shadow ${
                              opportunity.status === "won"
                                ? "border border-green-200 dark:border-green-800 bg-green-50/50 dark:bg-green-900/10 hover:border-green-300 hover:bg-green-50 dark:hover:border-green-700 dark:hover:bg-green-900/20"
                                : opportunity.status === "lost"
                                ? "border border-red-200 dark:border-red-800 bg-red-50/50 dark:bg-red-900/10 hover:border-red-300 hover:bg-red-50 dark:hover:border-red-700 dark:hover:bg-red-900/20"
                                : "border border-blue-100 dark:border-blue-900 hover:border-blue-300 hover:bg-blue-50 dark:hover:border-blue-700 dark:hover:bg-blue-900/20"
                            }`}
                          >
                            <h4 className="font-medium text-gray-900 dark:text-gray-100 flex items-center">
                              {opportunity.name}
                              {opportunity.status === "won" && (
                                <span className="ml-1.5 text-green-600 dark:text-green-400 text-xs bg-green-100 dark:bg-green-900/30 rounded-full px-1.5 py-0.5">
                                  Ganado
                                </span>
                              )}
                              {opportunity.status === "lost" && (
                                <span className="ml-1.5 text-red-600 dark:text-red-400 text-xs bg-red-100 dark:bg-red-900/30 rounded-full px-1.5 py-0.5">
                                  Perdido
                                </span>
                              )}
                            </h4>

                            <div className="text-sm text-gray-600 dark:text-gray-400 mt-1 flex items-center">
                              {opportunity.customer?.full_name ||
                                "Cliente no especificado"}
                            </div>

                            {opportunity.expected_close_date && (
                              <div className="mt-1 text-xs text-gray-500 dark:text-gray-400 flex items-center">
                                <Calendar className="h-3 w-3 mr-1 text-blue-500 dark:text-blue-400" />
                                {new Date(
                                  opportunity.expected_close_date
                                ).toLocaleDateString("es-ES")}
                              </div>
                            )}

                            <div className="flex items-center justify-between mt-2 pt-2 border-t border-blue-50 dark:border-blue-900/50">
                              <div
                                className={`font-medium flex items-center ${
                                  opportunity.status === "won"
                                    ? "text-green-600 dark:text-green-400"
                                    : opportunity.status === "lost"
                                    ? "text-red-500 dark:text-red-400"
                                    : "text-blue-600 dark:text-blue-400"
                                }`}
                              >
                                <DollarSign className="h-3 w-3 mr-0.5" />
                                {formatCurrency(opportunity.amount)}
                              </div>
                              <Badge
                                className={`capitalize ${
                                  opportunity.status === "won"
                                    ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                                    : opportunity.status === "lost"
                                    ? "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                                    : "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200"
                                }`}
                              >
                                {opportunity.currency || "COP"}
                              </Badge>
                            </div>
                          </Card>
                        )}
                      </Draggable>
                    )
                  )}
                  {provided.placeholder}
                </div>
              )}
            </Droppable>
          </div>
        ))}
      </div>

      {/* Diálogo de configuración de etapa */}
      <Dialog open={isConfigOpen} onOpenChange={setIsConfigOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Configurar etapa</DialogTitle>
          </DialogHeader>
          <div className="grid gap-4 py-4">
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="stageName" className="text-right">
                Nombre <span className="text-red-500">*</span>
              </Label>
              <Input
                id="stageName"
                value={stageName}
                onChange={(e) => setStageName(e.target.value)}
                className="col-span-3"
                required
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="probability" className="text-right">
                Probabilidad (%){" "}
                <span className="text-gray-400 text-xs">(Opcional)</span>
              </Label>
              <Input
                id="probability"
                type="number"
                min="0"
                max="100"
                value={stageProbability || ""}
                onChange={(e) =>
                  setStageProbability(parseInt(e.target.value) || null)
                }
                className="col-span-3"
              />
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="color" className="text-right">
                Color <span className="text-gray-400 text-xs">(Opcional)</span>
              </Label>
              <div className="col-span-3 flex items-center gap-2">
                <input
                  type="color"
                  id="color"
                  value={stageColor}
                  onChange={(e) => setStageColor(e.target.value)}
                  className="h-8 w-8 rounded-md cursor-pointer"
                />
                <Input
                  value={stageColor}
                  onChange={(e) => setStageColor(e.target.value)}
                  className="flex-1"
                />
              </div>
            </div>
            <div className="grid grid-cols-4 items-center gap-4">
              <Label htmlFor="description" className="text-right">
                Descripción{" "}
                <span className="text-gray-400 text-xs">(Opcional)</span>
              </Label>
              <Input
                id="description"
                value={stageDescription}
                onChange={(e) => setStageDescription(e.target.value)}
                className="col-span-3"
              />
            </div>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={() => setIsConfigOpen(false)}
              disabled={isSaving}
            >
              Cancelar
            </Button>
            <Button type="submit" onClick={handleSaveStage} disabled={isSaving}>
              {isSaving ? (
                <>
                  <span className="mr-2">Guardando</span>
                  <Loader2 className="h-4 w-4 animate-spin" />
                </>
              ) : (
                "Guardar"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </DragDropContext>
  );
}

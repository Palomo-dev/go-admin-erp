/**
 * Servicio centralizado para generar n√∫meros consecutivos de notas de cr√©dito
 * 
 * Este servicio garantiza que todos los m√≥dulos (POS, Finanzas) usen el mismo
 * formato y numeraci√≥n consecutiva sin duplicados.
 */

import { supabase } from '@/lib/supabase/config';

export class CreditNoteNumberService {
  /**
   * Genera el siguiente n√∫mero consecutivo de nota de cr√©dito
   * Formato est√°ndar: NC-0001, NC-0002, NC-0003, etc.
   * 
   * @param organizationId - ID de la organizaci√≥n
   * @returns Promise<string> - Siguiente n√∫mero consecutivo
   */
  static async generateNextCreditNoteNumber(organizationId: string): Promise<string> {
    try {
      console.log('üî¢ Generando siguiente n√∫mero de nota de cr√©dito...');
      
      // Buscar todas las notas de cr√©dito para encontrar el n√∫mero m√°s alto
      const { data: creditNotes, error } = await supabase
        .from('invoice_sales')
        .select('number')
        .eq('document_type', 'credit_note')
        .eq('organization_id', organizationId)
        .order('created_at', { ascending: false });

      if (error) {
        console.error('‚ùå Error consultando notas de cr√©dito:', error);
        throw new Error(`Error al consultar notas de cr√©dito: ${error.message}`);
      }

      let maxNumber = 0;

      if (creditNotes && creditNotes.length > 0) {
        console.log(`üìã Encontradas ${creditNotes.length} notas de cr√©dito existentes`);
        
        // Procesar cada n√∫mero para encontrar el m√°s alto
        creditNotes.forEach(note => {
          if (note.number) {
            const extractedNumber = this.extractNumberFromCreditNoteString(note.number);
            if (extractedNumber > maxNumber) {
              maxNumber = extractedNumber;
            }
          }
        });
        
        console.log(`üîç N√∫mero m√°s alto encontrado: ${maxNumber}`);
      } else {
        console.log('üìù No hay notas de cr√©dito previas, iniciando desde 0');
      }

      // Generar siguiente n√∫mero
      const nextNumber = maxNumber + 1;
      const formattedNumber = `NC-${String(nextNumber).padStart(4, '0')}`;
      
      console.log(`‚úÖ N√∫mero generado: ${formattedNumber}`);
      return formattedNumber;

    } catch (error) {
      console.error('‚ùå Error en generateNextCreditNoteNumber:', error);
      throw error;
    }
  }

  /**
   * Extrae el n√∫mero entero de una cadena de nota de cr√©dito
   * Maneja diferentes formatos existentes:
   * - "NC-0001" ‚Üí 1
   * - "NC00000004" ‚Üí 4  
   * - "NC-0NaN" ‚Üí 0 (casos con error)
   * 
   * @param creditNoteString - Cadena del n√∫mero de nota de cr√©dito
   * @returns number - N√∫mero extra√≠do
   */
  private static extractNumberFromCreditNoteString(creditNoteString: string): number {
    try {
      // Remover prefijo NC y cualquier car√°cter no num√©rico del inicio
      let numberPart = creditNoteString.replace(/^NC[-]?/i, '');
      
      // Si contiene "NaN" o caracteres inv√°lidos, retornar 0
      if (numberPart.includes('NaN') || numberPart.includes('undefined')) {
        console.warn(`‚ö†Ô∏è N√∫mero inv√°lido detectado: ${creditNoteString}, usando 0`);
        return 0;
      }
      
      // Extraer solo d√≠gitos
      const digits = numberPart.replace(/\D/g, '');
      
      if (digits === '') {
        console.warn(`‚ö†Ô∏è No se encontraron d√≠gitos en: ${creditNoteString}, usando 0`);
        return 0;
      }
      
      const number = parseInt(digits, 10);
      
      if (isNaN(number)) {
        console.warn(`‚ö†Ô∏è N√∫mero inv√°lido despu√©s del parsing: ${creditNoteString}, usando 0`);
        return 0;
      }
      
      return number;
      
    } catch (error) {
      console.warn(`‚ö†Ô∏è Error procesando n√∫mero: ${creditNoteString}, usando 0. Error:`, error);
      return 0;
    }
  }

  /**
   * Valida si un n√∫mero de nota de cr√©dito ya existe
   * 
   * @param organizationId - ID de la organizaci√≥n
   * @param creditNoteNumber - N√∫mero a validar
   * @returns Promise<boolean> - true si existe, false si no existe
   */
  static async creditNoteNumberExists(organizationId: string, creditNoteNumber: string): Promise<boolean> {
    try {
      const { data, error } = await supabase
        .from('invoice_sales')
        .select('id')
        .eq('document_type', 'credit_note')
        .eq('organization_id', organizationId)
        .eq('number', creditNoteNumber)
        .single();

      if (error && error.code !== 'PGRST116') { // PGRST116 = no rows returned
        throw error;
      }

      return !!data;
    } catch (error) {
      console.error('‚ùå Error validando existencia de n√∫mero:', error);
      throw error;
    }
  }

  /**
   * Normaliza n√∫meros existentes a formato est√°ndar (para migraci√≥n)
   * NOTA: Esta funci√≥n es para uso administrativo solamente
   * 
   * @param organizationId - ID de la organizaci√≥n
   */
  static async normalizeExistingCreditNoteNumbers(organizationId: string): Promise<void> {
    console.log('üîß ADVERTENCIA: Normalizando n√∫meros existentes...');
    
    try {
      // Obtener todas las notas de cr√©dito con formatos inconsistentes
      const { data: creditNotes, error } = await supabase
        .from('invoice_sales')
        .select('id, number')
        .eq('document_type', 'credit_note')
        .eq('organization_id', organizationId)
        .order('created_at', { ascending: true });

      if (error) throw error;

      if (!creditNotes || creditNotes.length === 0) {
        console.log('üìù No hay notas de cr√©dito para normalizar');
        return;
      }

      console.log(`üìã Normalizando ${creditNotes.length} notas de cr√©dito...`);

      // Renumerar secuencialmente
      for (let i = 0; i < creditNotes.length; i++) {
        const note = creditNotes[i];
        const newNumber = `NC-${String(i + 1).padStart(4, '0')}`;
        
        if (note.number !== newNumber) {
          console.log(`üîÑ Actualizando ${note.number} ‚Üí ${newNumber}`);
          
          const { error: updateError } = await supabase
            .from('invoice_sales')
            .update({ number: newNumber })
            .eq('id', note.id);

          if (updateError) {
            console.error(`‚ùå Error actualizando ${note.id}:`, updateError);
          } else {
            console.log(`‚úÖ Actualizado: ${note.number} ‚Üí ${newNumber}`);
          }
        }
      }

      console.log('‚úÖ Normalizaci√≥n completada');
      
    } catch (error) {
      console.error('‚ùå Error en normalizaci√≥n:', error);
      throw error;
    }
  }
}
